apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        readinessProbe:
          exec:
            command:
            - mongosh
            - -u
            - $MONGO_INITDB_ROOT_USERNAME
            - -p
            - $MONGO_INITDB_ROOT_PASSWORD
            - --eval
            - db.adminCommand('ping')
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
        - name: mongodb-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 5
  template:
    spec:
      initContainers:
      - name: wait-for-mongodb
        image: mongo:7.0
        command:
        - mongosh
        - -u
        - $MONGO_INITDB_ROOT_USERNAME
        - -p
        - $MONGO_INITDB_ROOT_PASSWORD
        - --eval
        - db.adminCommand('ping')
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_PASSWORD
      containers:
      - name: mongodb-init
        image: mongo:7.0
        command:
        - mongosh
        - -u
        - $MONGO_INITDB_ROOT_USERNAME
        - -p
        - $MONGO_INITDB_ROOT_PASSWORD
        - --eval
        - |
          db = db.getSiblingDB("sausage-store");
          try {
            db.dropUser("reports");
          } catch (err) {
            print("User reports does not exist yet, continuing...");
          }
          db.createUser({
            user: "reports",
            pwd: "reportspassword",
            roles: [
              { role: "readWrite", db: "sausage-store" }
            ]
          });
          print("User reports created successfully!");
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_PASSWORD
      restartPolicy: OnFailure
