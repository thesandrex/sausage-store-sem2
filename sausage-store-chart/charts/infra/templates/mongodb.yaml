apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    "helm.sh/hook-weight": "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:7.0
          envFrom:
            - configMapRef:
                name: mongodb-conf
          ports:
            - containerPort: {{ .Values.infra.mongodb.containerPort }}
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
  volumeClaimTemplates:
    - metadata:
        name: mongodb-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
    - port: {{ .Values.infra.mongodb.containerPort }}
      targetPort: {{ .Values.infra.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None

---

apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-weight": "5"
spec:
  template:
    spec:
      containers:
        - name: mongodb-init
          image: mongo:7.0
          envFrom:
            - configMapRef:
                name: mongodb-conf
          command:
            - /bin/sh
            - -c
            - |
              until mongosh --host mongodb --eval "print('waited for connection')"; do
                sleep 2
              done
              mongosh --host mongodb --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval "
              db = db.getSiblingDB('${MONGO_REPORTS_DATABASE}');
              db.createUser({
                user: '${MONGO_REPORTS_USERNAME}',
                pwd: '${MONGO_REPORTS_PASSWORD}',
                roles: [{ role: 'readWrite', db: '${MONGO_REPORTS_DATABASE}' }]
              });
              "
      restartPolicy: OnFailure
  backoffLimit: 4

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}
  MONGO_REPORTS_DATABASE: {{ .Values.mongodb.env.MONGO_REPORTS_DATABASE }}
  MONGO_REPORTS_USERNAME: {{ .Values.mongodb.env.MONGO_REPORTS_USERNAME }}
  MONGO_REPORTS_PASSWORD: {{ .Values.mongodb.env.MONGO_REPORTS_PASSWORD }}
