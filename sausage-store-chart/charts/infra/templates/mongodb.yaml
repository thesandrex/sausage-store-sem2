apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  annotations:
    helm.sh/hook-weight: "-5"
spec:
  serviceName: mongodb
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:7.0
        envFrom:
          - configMapRef:
              name: mongodb-conf
        ports:
        - containerPort: {{ .Values.mongodb.containerPort }}
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db
      volumes:
        - name: mongodb-data
          emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  labels:
    app: mongodb
spec:
  ports:
  - port: {{ .Values.mongodb.containerPort }}
    targetPort: {{ .Values.mongodb.containerPort }}
  selector:
    app: mongodb
  clusterIP: None
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-conf
data:
  MONGO_INITDB_ROOT_USERNAME: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_USERNAME }}
  MONGO_INITDB_ROOT_PASSWORD: {{ .Values.mongodb.env.MONGO_INITDB_ROOT_PASSWORD }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      containers:
      - name: mongodb-init
        image: mongo:7.0
        command:
        - bash
        - -c
        - |
          until mongosh --host mongodb -u root -p rootpassword --eval "print('waited for connection')"
          do
            echo "waiting for mongodb connection..."
            sleep 2
          done
          echo "MongoDB is ready"
          mongosh --host mongodb -u root -p rootpassword --eval '
            db = db.getSiblingDB("sausage-store");
            db.createUser({
              user: "reports",
              pwd: "reportspassword",
              roles: [
                { role: "readWrite", db: "sausage-store" }
              ]
            });
          '
        resources:
          requests:
            memory: "64Mi"
            cpu: "25m"
          limits:
            memory: "128Mi"
            cpu: "50m"
      restartPolicy: OnFailure