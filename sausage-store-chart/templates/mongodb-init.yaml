apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "0"
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  backoffLimit: 10
  template:
    spec:
      initContainers:
      - name: wait-for-mongodb
        image: mongo:7.0
        command:
        - mongosh
        - -u
        - root
        - -p
        - rootpassword
        - --eval
        - db.adminCommand('ping')
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_PASSWORD
      containers:
      - name: mongodb-init
        image: mongo:7.0
        command:
        - mongosh
        - -u
        - root
        - -p
        - rootpassword
        - --eval
        - |
          db = db.getSiblingDB("sausage-store");
          try {
            db.dropUser("reports");
          } catch (err) {
            print("User reports does not exist yet, continuing...");
          }
          db.createUser({
            user: "reports",
            pwd: "reportspassword",
            roles: [
              { role: "readWrite", db: "sausage-store" }
            ]
          });
          print("User reports created successfully!");
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              name: mongodb-conf
              key: MONGO_INITDB_ROOT_PASSWORD
      restartPolicy: OnFailure 